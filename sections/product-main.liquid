{%- assign current_variant = product.selected_or_first_available_variant -%}

<!-- Product Section -->
<section class="product-section">
    <div class="container">
        <div class="product-grid">
            <!-- Product Images -->
            <div class="product-images">
                <div class="main-image">
                    <img id="mainProductImage" 
                         src="{{ current_variant.featured_image | default: product.featured_image | image_url: width: 800 }}" 
                         alt="{{ current_variant.featured_image.alt | default: product.featured_image.alt | default: product.title | escape }}"
                         loading="lazy">
                    <div class="product-badges">
                        <div class="badge">
                            <span class="badge-dot"></span>
                            <span>{{ section.settings.product_badge | default: 'Nouveau' }}</span>
                        </div>
                        {%- if current_variant.compare_at_price > current_variant.price -%}
                          {%- assign discount = current_variant.compare_at_price | minus: current_variant.price | times: 100 | divided_by: current_variant.compare_at_price -%}
                          <div class="urgency-badge">
                            <span class="urgency-dot"></span>
                            <span>-{{ discount }}%</span>
                          </div>
                        {%- endif -%}
                    </div>
                </div>
                {%- if product.images.size > 1 -%}
                  <div class="thumbnails">
                      {%- for image in product.images limit: 4 -%}
                        <button class="thumbnail{% if forloop.first %} active{% endif %}" onclick="changeImage({{ forloop.index0 }})" type="button">
                            <img src="{{ image | image_url: width: 400 }}" alt="{{ image.alt | default: product.title | escape }}" loading="lazy">
                        </button>
                      {%- endfor -%}
                  </div>
                {%- endif -%}
            </div>

            <!-- Product Info -->
            <div class="product-info">
                <h1>{{ product.title }}</h1>
                
                {%- if product.metafields.reviews.rating.value != blank -%}
                  <div class="rating">
                      <div class="stars">
                          {%- assign rating = product.metafields.reviews.rating.value | round -%}
                          {%- for i in (1..5) -%}
                            {%- if i <= rating -%}
                              <span>⭐</span>
                            {%- endif -%}
                          {%- endfor -%}
                      </div>
                      <span class="rating-text">({{ product.metafields.reviews.rating.value }}/5 - {{ product.metafields.reviews.rating_count.value | default: '127' }} avis)</span>
                  </div>
                {%- else -%}
                  <div class="rating">
                      <div class="stars">
                          <span>⭐</span><span>⭐</span><span>⭐</span><span>⭐</span><span>⭐</span>
                      </div>
                      <span class="rating-text">({{ section.settings.default_rating | default: '4.9/5 - 127 avis' }})</span>
                  </div>
                {%- endif -%}

                <div class="price-card">
                    <div class="price-info">
                        {%- if current_variant.compare_at_price > current_variant.price -%}
                          <span class="old-price-large">{{ current_variant.compare_at_price | money }}</span>
                        {%- endif -%}
                        <span class="new-price-large" id="price-{{ section.id }}">{{ current_variant.price | money }}</span>
                    </div>
                    {%- if current_variant.compare_at_price > current_variant.price -%}
                      {%- assign savings = current_variant.compare_at_price | minus: current_variant.price -%}
                      {%- assign discount = savings | times: 100 | divided_by: current_variant.compare_at_price -%}
                      <p class="savings">Économisez {{ savings | money }} ({{ discount }}%)</p>
                    {%- endif -%}
                    <div class="shipping-free">
                        <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                            <rect x="1" y="3" width="15" height="13"/>
                            <polygon points="16,6 20,6 23,11 23,16 16,16"/>
                            <circle cx="5.5" cy="18.5" r="2.5"/>
                            <circle cx="18.5" cy="18.5" r="2.5"/>
                        </svg>
                        {{ section.settings.shipping_text | default: 'Livraison gratuite' }}
                    </div>
                </div>

                <div class="product-description">
                    {{ product.description | truncatewords: 50 }}
                </div>

                <!-- Product Form Dawn Structure -->
                <product-form class="product-form" data-section="{{ section.id }}">
                  <div class="product-form__error-message-wrapper" role="alert" hidden>
                    <svg aria-hidden="true" focusable="false" class="icon icon-error" viewBox="0 0 13 13">
                      <circle cx="6.5" cy="6.50049" r="5.5" stroke="white" stroke-width="2"/>
                      <circle cx="6.5" cy="6.5" r="5.5" fill="#EB001B" stroke="#EB001B" stroke-width="0.7"/>
                      <path d="m5.87413 3.52832 5.6635 9.5737c.24749.42626.02049.96966-.49134.96966H2.65893c-.51183 0-.73883-.54341-.49134-.96966l5.6635-9.5737a.50033.50033 0 0 1 .87654 0Z" fill="white"/>
                      <path d="m4.19583 7.00049-.71184 3.8984c-.02951.16234.08112.30135.24885.30135h2.51632c.16773 0 .27836-.13901.24885-.30135L6.80417 7.00049H4.19583Z" fill="#EB001B"/>
                    </svg>
                    <span class="product-form__error-message"></span>
                  </div>

                  {%- form 'product', product, id: 'product-form-{{ section.id }}', class: 'form', novalidate: 'novalidate', data-type: 'add-to-cart-form' -%}
                    <input type="hidden" name="form_type" value="product">
                    <input type="hidden" name="utf8" value="✓">
                    <input type="hidden" name="id" value="{{ current_variant.id }}" disabled>
                    
                    <!-- Script avec données produit pour JavaScript -->
                    <script type="application/json" data-product-json>
                      {{ product | json }}
                    </script>

                    <!-- Sélecteur de variantes Dawn -->
                    {% unless product.has_only_default_variant %}
                      {% render 'product-variant-picker', product: product, block: block, product_form_id: 'product-form-{{ section.id }}' %}
                    {% endunless %}

                    <!-- Sélecteur de quantité -->
                    {%- if section.settings.show_quantity_selector != false -%}
                      <div class="product-form__input product-form__quantity quantity-selector">
                        <label class="form__label" for="Quantity-{{ section.id }}">{{ section.settings.quantity_label | default: 'Quantité' }}</label>
                        <quantity-input class="quantity quantity-input" data-url="{{ product.url }}" data-section="{{ section.id }}">
                          <button class="quantity__button no-js-hidden qty-minus" name="minus" type="button">
                            <span class="visually-hidden">{{ 'products.product.quantity.decrease' | t: product: product.title | escape }}</span>
                            {% render 'icon-minus' %}
                          </button>
                          <input 
                            class="quantity__input" 
                            type="number" 
                            name="quantity" 
                            id="Quantity-{{ section.id }}" 
                            data-quantity-variant-id="{{ current_variant.id }}"
                            min="1" 
                            value="1"
                            form="product-form-{{ section.id }}"
                          >
                          <button class="quantity__button no-js-hidden qty-plus" name="plus" type="button">
                            <span class="visually-hidden">{{ 'products.product.quantity.increase' | t: product: product.title | escape }}</span>
                            {% render 'icon-plus' %}
                          </button>
                        </quantity-input>
                      </div>
                    {%- endif -%}

                    <!-- Boutons d'achat -->
                    <div class="product-form__buttons">
                      <button 
                        type="submit" 
                        name="add" 
                        id="ProductSubmitButton-{{ section.id }}"
                        class="product-form__submit button button--primary btn-buy btn-add-to-cart"
                        {%- if product.selected_or_first_available_variant.available == false -%}disabled{%- endif -%}
                      >
                        <span>
                          {%- if product.selected_or_first_available_variant.available -%}
                            {{ section.settings.add_to_cart_text | default: 'Ajouter au panier' }}
                          {%- else -%}
                            {{ section.settings.sold_out_text | default: 'Rupture de stock' }}
                          {%- endif -%}
                        </span>
                        {%- render 'loading-spinner' -%}
                      </button>

              <!-- Acheter maintenant -->
              {%- if section.settings.show_buy_now_button -%}
                <button 
                  type="button" 
                  name="buy_now" 
                  class="product-form__buy-now button button--secondary btn-buy-now"
                  {%- if product.selected_or_first_available_variant.available == false -%}disabled{%- endif -%}
                >
                  {{ section.settings.buy_now_text | default: 'Acheter maintenant' }}
                </button>
              {%- endif -%}

                      <!-- Checkout dynamique -->
                      {%- if section.settings.show_dynamic_checkout -%}
                        {{ form | payment_button }}
                      {%- endif -%}
                    </div>

                    {%- if shop.taxes_included or shop.shipping_policy.body != blank -%}
                      <div class="product-form__tax-line rte">
                        {%- if shop.taxes_included -%}
                          {{ 'products.product.include_taxes' | t }}
                        {%- endif -%}
                        {%- if shop.shipping_policy.body != blank -%}
                          {{ 'products.product.shipping_policy_html' | t: link: shop.shipping_policy.url }}
                        {%- endif -%}
                      </div>
                    {%- endif -%}
                  {%- endform -%}
                </product-form>

                 <!-- Fallback pour JS désactivé -->
                <noscript class="product-form">
                  {%- form 'product', product, class: 'form', novalidate: 'novalidate', data-type: 'add-to-cart-form' -%}
                    <input type="hidden" name="id" value="{{ product.selected_or_first_available_variant.id }}">
                    <button type="submit" name="add" class="btn-buy btn-add-to-cart">
                      <span>
                        {%- if current_variant.available -%}
                          {{ section.settings.add_to_cart_text | default: 'Acheter maintenant' }}
                        {%- else -%}
                          {{ section.settings.sold_out_text | default: 'Rupture de stock' }}
                        {%- endif -%}
                      </span>
                    </button>
                  {%- endform -%}
                </noscript>

<!-- Chargement des scripts et styles Dawn -->
{{ 'component-product-form.css' | asset_url | stylesheet_tag }}
{{ 'component-product-variant-picker.css' | asset_url | stylesheet_tag }}
{{ 'variant-radios.js' | asset_url | script_tag }}
{{ 'product-form.js' | asset_url | script_tag }}
{{ 'product-buy-now.js' | asset_url | script_tag }}
            </div>
        </div>
    </div>
</section>

<style>
/* Styles modernes pour les sélecteurs de variantes */
.variant-input {
  position: absolute;
  opacity: 0;
  pointer-events: none;
}

/* Sélecteurs de couleur en cercles */
.color-swatch {
  display: inline-block;
  position: relative;
  width: 48px;
  height: 48px;
  border-radius: 50%;
  border: 2px solid transparent;
  cursor: pointer;
  transition: all 0.3s ease;
  margin: 0 8px 8px 0;
}

.color-swatch:hover {
  transform: scale(1.1);
  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
}

.color-swatch__color {
  display: block;
  width: 100%;
  height: 100%;
  border-radius: 50%;
  border: 2px solid #e5e5e5;
  transition: border-color 0.3s ease;
}

.variant-input:checked + .color-swatch {
  border-color: #4285f4;
  box-shadow: 0 0 0 2px rgba(66, 133, 244, 0.2);
}

.variant-input:checked + .color-swatch .color-swatch__color {
  border-color: #4285f4;
}

.variant-input:disabled + .color-swatch {
  opacity: 0.5;
  cursor: not-allowed;
  position: relative;
}

.variant-input:disabled + .color-swatch::after {
  content: '';
  position: absolute;
  top: 50%;
  left: 50%;
  width: 2px;
  height: 120%;
  background: #ff4757;
  transform: translate(-50%, -50%) rotate(45deg);
  border-radius: 1px;
}

/* Boutons de variantes standards */
.variant-button {
  display: inline-block;
  padding: 12px 20px;
  border: 2px solid #e5e5e5;
  border-radius: 8px;
  background: white;
  color: #333;
  cursor: pointer;
  transition: all 0.3s ease;
  margin: 0 8px 8px 0;
  font-size: 14px;
  font-weight: 500;
}

.variant-button:hover {
  border-color: #4285f4;
  background: #f8f9ff;
}

.variant-input:checked + .variant-button {
  border-color: #4285f4;
  background: #4285f4;
  color: white;
}

.variant-input:disabled + .variant-button {
  opacity: 0.5;
  cursor: not-allowed;
  background: #f5f5f5;
  color: #999;
}

/* Sélecteur de quantité moderne */
.quantity-selector {
  margin: 20px 0;
}

.quantity-input {
  display: flex;
  align-items: center;
  gap: 0;
  width: fit-content;
  border: 2px solid #e5e5e5;
  border-radius: 8px;
  overflow: hidden;
  background: white;
}

.quantity__button {
  width: 44px;
  height: 44px;
  border: none;
  background: #f8f9fa;
  color: #333;
  cursor: pointer;
  display: flex;
  align-items: center;
  justify-content: center;
  transition: all 0.3s ease;
  font-size: 18px;
  font-weight: bold;
}

.quantity__button:hover {
  background: #e9ecef;
}

.quantity__button:active {
  background: #dee2e6;
}

.quantity__input {
  width: 60px;
  height: 44px;
  border: none;
  text-align: center;
  font-size: 16px;
  font-weight: 500;
  background: white;
  outline: none;
}

/* Boutons d'achat harmonisés */
.product-form__buttons {
  display: flex;
  flex-direction: column;
  gap: 12px;
  margin-top: 24px;
}

.btn-buy {
  width: 100%;
  padding: 16px 24px;
  border: none;
  border-radius: 12px;
  font-size: 16px;
  font-weight: 600;
  cursor: pointer;
  transition: all 0.3s ease;
  position: relative;
  overflow: hidden;
}

.btn-add-to-cart {
  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
  color: white;
  box-shadow: 0 4px 15px rgba(102, 126, 234, 0.4);
}

.btn-add-to-cart:hover {
  transform: translateY(-2px);
  box-shadow: 0 8px 25px rgba(102, 126, 234, 0.6);
}

.btn-buy-now {
  background: linear-gradient(135deg, #f093fb 0%, #f5576c 100%);
  color: white;
  box-shadow: 0 4px 15px rgba(240, 147, 251, 0.4);
}

.btn-buy-now:hover {
  transform: translateY(-2px);
  box-shadow: 0 8px 25px rgba(240, 147, 251, 0.6);
}

.btn-buy:disabled {
  background: #e9ecef;
  color: #6c757d;
  cursor: not-allowed;
  transform: none;
  box-shadow: none;
}

.btn-buy.loading {
  pointer-events: none;
}

.loading__spinner {
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  width: 20px;
  height: 20px;
}

.loading__spinner.hidden {
  display: none;
}

/* Animation du spinner */
.loading__spinner .path {
  stroke: currentColor;
  stroke-dasharray: 90, 150;
  stroke-dashoffset: 0;
  stroke-linecap: round;
  animation: spinner 1.5s ease-in-out infinite;
}

@keyframes spinner {
  0% {
    stroke-dasharray: 1, 150;
    stroke-dashoffset: 0;
  }
  50% {
    stroke-dasharray: 90, 150;
    stroke-dashoffset: -35;
  }
  100% {
    stroke-dasharray: 90, 150;
    stroke-dashoffset: -124;
  }
}

/* Responsive */
@media (min-width: 768px) {
  .product-form__buttons {
    flex-direction: row;
  }
  
  .btn-buy {
    flex: 1;
  }
}

/* Utilitaire pour masquer visuellement */
.visually-hidden {
  position: absolute !important;
  width: 1px !important;
  height: 1px !important;
  padding: 0 !important;
  margin: -1px !important;
  overflow: hidden !important;
  clip: rect(0, 0, 0, 0) !important;
  white-space: nowrap !important;
  border: 0 !important;
}
</style>

<script>
  // Product images array
  const productImages{{ section.id }} = [
    {%- for image in product.images -%}
      "{{ image | image_url: width: 800 }}"{%- unless forloop.last -%},{%- endunless -%}
    {%- endfor -%}
  ];

  // Change image function
  function changeImage(index) {
    const mainImage = document.getElementById('mainProductImage');
    const thumbnails = document.querySelectorAll('.thumbnail');
    
    if (mainImage && index >= 0 && index < productImages{{ section.id }}.length) {
        mainImage.src = productImages{{ section.id }}[index];
        
        // Update active thumbnail
        thumbnails.forEach((thumb, i) => {
            thumb.classList.toggle('active', i === index);
        });
    }
  }

  // Global window properties for Shopify compatibility
  window.product = {{ product | json }};
  window.productVariants = {{ product.variants | json }};

  // Product Form Logic (Dawn compatible)
  class ProductForm extends HTMLElement {
    constructor() {
      super();
      this.form = this.querySelector('form');
      this.form.querySelector('[name=id]').disabled = false;
      this.form.addEventListener('submit', this.onSubmitHandler.bind(this));
      this.cart = document.querySelector('cart-notification') || document.querySelector('cart-drawer');
      this.submitButton = this.querySelector('[type="submit"]');
    }

    onSubmitHandler(evt) {
      evt.preventDefault();
      if (this.submitButton.getAttribute('aria-disabled') === 'true') return;

      this.handleErrorMessage();

      this.submitButton.setAttribute('aria-disabled', true);
      this.submitButton.classList.add('loading');
      this.querySelector('.loading__spinner').classList.remove('hidden');

      const config = {
        method: 'POST',
        headers: {
          'X-Requested-With': 'XMLHttpRequest',
          'Accept': 'application/javascript',
        },
        body: new FormData(this.form)
      };

      if (this.cart) {
        config.sections = this.cart.getSectionsToRender().map((section) => section.id);
        config.sections_url = window.location.pathname;
        config.headers['Content-Type'] = 'application/json';
        config.body = JSON.stringify({
          ...Object.fromEntries(new FormData(this.form)),
          sections: config.sections,
          sections_url: config.sections_url
        });
      }

      fetch(`${routes.cart_add_url}`, config)
        .then((response) => response.json())
        .then((response) => {
          if (response.status) {
            this.handleErrorMessage(response.description);
            
            const soldOutMessage = this.submitButton.querySelector('.sold-out-message');
            if (!soldOutMessage) return;
            this.submitButton.setAttribute('aria-disabled', true);
            this.submitButton.querySelector('span').classList.add('hidden');
            soldOutMessage.classList.remove('hidden');
            this.error = true;
            return;
          } else if (!this.cart) {
            window.location = window.routes.cart_url;
            return;
          }

          this.error = false;
          const quickAddModal = this.closest('quick-add-modal');
          if (quickAddModal) {
            document.body.addEventListener('modalClosed', () => {
              setTimeout(() => { this.cart.renderContents(response) });
            }, { once: true });
            quickAddModal.hide(true);
          } else {
            this.cart.renderContents(response);
          }
        })
        .catch((e) => {
          console.error(e);
        })
        .finally(() => {
          this.submitButton.classList.remove('loading');
          if (this.cart && this.cart.classList.contains('is-empty')) this.cart.classList.remove('is-empty');
          if (!this.error) this.submitButton.removeAttribute('aria-disabled');
          this.querySelector('.loading__spinner').classList.add('hidden');
        });
    }

    handleErrorMessage(errorMessage = false) {
      this.errorMessageWrapper = this.errorMessageWrapper || this.querySelector('.product-form__error-message-wrapper');
      if (!this.errorMessageWrapper) return;
      this.errorMessage = this.errorMessage || this.errorMessageWrapper.querySelector('.product-form__error-message');

      this.errorMessageWrapper.toggleAttribute('hidden', !errorMessage);

      if (errorMessage) {
        this.errorMessage.textContent = errorMessage;
      }
    }
  }

  customElements.define('product-form', ProductForm);

  // Quantity Input Logic
  class QuantityInput extends HTMLElement {
    constructor() {
      super();
      this.input = this.querySelector('input');
      this.changeEvent = new Event('change', { bubbles: true });
      this.querySelectorAll('button').forEach(
        (button) => button.addEventListener('click', this.onButtonClick.bind(this))
      );
    }

    onButtonClick(event) {
      event.preventDefault();
      const previousValue = this.input.value;

      if (event.target.name === 'plus') {
        this.input.stepUp();
      } else {
        this.input.stepDown();
      }
      if (previousValue !== this.input.value) this.input.dispatchEvent(this.changeEvent);
    }
  }

  customElements.define('quantity-input', QuantityInput);

  // Variant Selection Logic (Dawn compatible)
  class VariantSelects extends HTMLElement {
    constructor() {
      super();
      this.addEventListener('change', this.onVariantChange);
      this.updateOptions();
      this.updateMasterId();
      this.setAvailability();
    }

    onVariantChange() {
      this.updateOptions();
      this.updateMasterId();
      this.toggleAddButton(true, '', false);
      this.updatePickupAvailability();
      this.removeErrorMessage();

      if (!this.currentVariant) {
        this.toggleAddButton(true, '', true);
        this.setUnavailable();
      } else {
        this.updateMedia();
        this.updateURL();
        this.updateVariantInput();
        this.renderProductInfo();
        this.setAvailability();
      }
    }

    updateOptions() {
      this.options = Array.from(this.querySelectorAll('input[type="radio"]:checked'), (input) => input.value);
    }

    updateMasterId() {
      this.currentVariant = this.getVariantData().find((variant) => {
        return !variant.options.map((option, index) => {
          return this.options[index] === option;
        }).includes(false);
      });
    }

    updateMedia() {
      if (!this.currentVariant) return;
      if (!this.currentVariant.featured_media) return;

      const mediaGallery = document.getElementById('MediaGallery-{{ section.id }}');
      const mainImage = document.getElementById('mainProductImage');
      
      if (mainImage && this.currentVariant.featured_image) {
        mainImage.src = this.currentVariant.featured_image.src;
        mainImage.alt = this.currentVariant.featured_image.alt;
      }
    }

    updateURL() {
      if (!this.currentVariant || this.dataset.updateUrl === 'false') return;
      window.history.replaceState({ }, '', `${this.dataset.url}?variant=${this.currentVariant.id}`);
    }

    updateVariantInput() {
      const productForms = document.querySelectorAll(`#product-form-{{ section.id }}, form[data-type="add-to-cart-form"]`);
      productForms.forEach((productForm) => {
        const input = productForm.querySelector('input[name="id"]');
        input.value = this.currentVariant.id;
        input.dispatchEvent(new Event('change', { bubbles: true }));
      });
    }

    updatePickupAvailability() {
      const pickUpAvailability = document.querySelector('pickup-availability');
      if (!pickUpAvailability) return;

      if (this.currentVariant && this.currentVariant.available) {
        pickUpAvailability.fetchAvailability(this.currentVariant.id);
      } else {
        pickUpAvailability.removeAttribute('available');
        pickUpAvailability.innerHTML = '';
      }
    }

    removeErrorMessage() {
      const section = this.closest('section');
      if (!section) return;

      const productForm = section.querySelector('product-form');
      if (productForm) productForm.handleErrorMessage();
    }

    renderProductInfo() {
      const requestedVariantId = this.currentVariant.id;
      const sectionId = this.dataset.section;

      fetch(`${this.dataset.url}?variant=${requestedVariantId}&section_id=${this.dataset.originalSection}`)
        .then((response) => response.text())
        .then((responseText) => {
          if (this.currentVariant.id !== requestedVariantId) return;

          const html = new DOMParser().parseFromString(responseText, 'text/html');
          const destination = document.getElementById(`price-${sectionId}`);
          const source = html.getElementById(`price-${sectionId}`);

          if (source && destination) destination.innerHTML = source.innerHTML;

          const price = document.getElementById(`price-${sectionId}`);
          if (price) price.classList.remove('visibility-hidden');
          
          this.toggleAddButton(
            !this.currentVariant.available,
            this.currentVariant.available ? '' : window.variantStrings.soldOut
          );
        });
    }

    setAvailability() {
      this.querySelectorAll('fieldset').forEach((fieldset) => {
        const optionInputs = [...fieldset.querySelectorAll('input[type="radio"]')];
        const optionName = fieldset.querySelector('legend').textContent.trim();
        
        optionInputs.forEach((input, index) => {
          const optionValue = input.value;
          const variantOption = `option${fieldset.dataset.optionIndex || (index + 1)}`;

          const availableVariants = this.getVariantData().filter((variant) => {
            return this.options.every((selectedOption, selectedOptionIndex) => {
              if (selectedOptionIndex === index) return true;
              const variantOptionName = `option${selectedOptionIndex + 1}`;
              return variant[variantOptionName] === selectedOption;
            });
          });

          const inputWrapper = input.closest('label') || input.parentElement;
          if (availableVariants.length === 0) {
            inputWrapper.classList.add('disabled');
          } else {
            inputWrapper.classList.remove('disabled');
          }
        });
      });
    }

    toggleAddButton(disable = true, text, modifyClass = true) {
      const productForm = document.getElementById(`product-form-${this.dataset.section}`);
      if (!productForm) return;

      const addButton = productForm.querySelector('[name="add"]');
      const addButtonText = productForm.querySelector('[name="add"] > span');
      if (!addButton) return;

      if (disable) {
        addButton.setAttribute('disabled', 'disabled');
        if (text) addButtonText.textContent = text;
      } else {
        addButton.removeAttribute('disabled');
        addButtonText.textContent = window.variantStrings.addToCart || 'Ajouter au panier';
      }
    }

    setUnavailable() {
      const button = document.getElementById(`product-form-${this.dataset.section}`);
      const addButton = button.querySelector('[name="add"]');
      const addButtonText = button.querySelector('[name="add"] > span');
      const price = document.getElementById(`price-${this.dataset.section}`);
      if (!addButton) return;

      addButtonText.textContent = window.variantStrings.unavailable || 'Non disponible';
      if (price) price.classList.add('visibility-hidden');
    }

    getVariantData() {
      this.variantData = this.variantData || JSON.parse(document.getElementById(`product-json-${this.dataset.section}`).textContent);
      return this.variantData;
    }
  }

  customElements.define('variant-selects', VariantSelects);

  // Cart routes for Shopify
  window.routes = {
    cart_add_url: '/cart/add',
    cart_change_url: '/cart/change',
    cart_update_url: '/cart/update',
    cart_url: '/cart',
    predictive_search_url: '/search/suggest'
  };

  // Localization strings
  window.variantStrings = {
    addToCart: '{{ section.settings.add_to_cart_text | default: "Ajouter au panier" | escape }}',
    soldOut: '{{ section.settings.sold_out_text | default: "Rupture de stock" | escape }}',
    unavailable: 'Non disponible',
    unitPrice: 'Prix unitaire'
  };

  // Initialize when DOM is loaded
  document.addEventListener('DOMContentLoaded', function() {
    const variantSelects = document.querySelector('variant-selects');
    if (variantSelects) {
      variantSelects.updateOptions();
      variantSelects.updateMasterId();
      variantSelects.setAvailability();
    }
  });
</script>

<script type="application/json">
  {{ product.variants | json }}
</script>

{% schema %}
{
  "name": "Produit Principal",
  "settings": [
    {
      "type": "text",
      "id": "product_badge",
      "label": "Badge produit",
      "default": "Nouveau"
    },
    {
      "type": "text",
      "id": "default_rating",
      "label": "Note par défaut",
      "default": "4.9/5 - 127 avis"
    },
    {
      "type": "text",
      "id": "shipping_text",
      "label": "Texte livraison",
      "default": "Livraison gratuite"
    },
    {
      "type": "checkbox",
      "id": "show_dynamic_checkout",
      "default": true,
      "label": "Afficher les boutons d'achat rapide"
    },
    {
      "type": "checkbox",
      "id": "show_quantity_selector",
      "default": true,
      "label": "Afficher le sélecteur de quantité"
    },
    {
      "type": "text",
      "id": "quantity_label",
      "default": "Quantité :",
      "label": "Label quantité"
    },
    {
      "type": "text",
      "id": "add_to_cart_text",
      "default": "Ajouter au panier",
      "label": "Texte du bouton Ajouter au panier"
    },
    {
      "type": "text",
      "id": "sold_out_text",
      "default": "Rupture de stock",
      "label": "Texte rupture de stock"
    },
    {
      "type": "checkbox",
      "id": "show_buy_now_button",
      "default": false,
      "label": "Afficher le bouton Acheter maintenant"
    },
    {
      "type": "text",
      "id": "buy_now_text",
      "default": "Acheter maintenant",
      "label": "Texte du bouton Acheter maintenant"
    }
  ],
  "presets": [
    {
      "name": "Produit Principal"
    }
  ]
}
{% endschema %}